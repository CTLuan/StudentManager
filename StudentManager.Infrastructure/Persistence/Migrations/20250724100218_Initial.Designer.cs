// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StudentManager.Infrastructure.Persistence.Context;

#nullable disable

namespace StudentManager.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(DBContext))]
    [Migration("20250724100218_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("StudentManager.Domain.Entities.Action", b =>
                {
                    b.Property<Guid>("ActionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActionCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.HasKey("ActionID");

                    b.ToTable("Actions");

                    b.HasData(
                        new
                        {
                            ActionID = new Guid("72652a32-3a06-4cf6-9c98-43ea0ac1d92d"),
                            ActionCode = "CREATE_USER",
                            ActionName = "Create User",
                            Active = true
                        },
                        new
                        {
                            ActionID = new Guid("edf088e9-a8e2-41ff-947b-af8afba6e1c3"),
                            ActionCode = "UPDATE_USER",
                            ActionName = "Update User",
                            Active = true
                        },
                        new
                        {
                            ActionID = new Guid("4801c236-5983-49ae-8b83-71b17cb29ac1"),
                            ActionCode = "DELETE_USER",
                            ActionName = "Delete User",
                            Active = true
                        });
                });

            modelBuilder.Entity("StudentManager.Domain.Entities.Class", b =>
                {
                    b.Property<Guid>("ClassID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("ClassCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("GradeLevelID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ClassID");

                    b.HasIndex("GradeLevelID");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("StudentManager.Domain.Entities.Department", b =>
                {
                    b.Property<Guid>("DepartmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("DepartmentCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DepartmentID");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            DepartmentID = new Guid("ae0f6039-feff-4bc8-885e-d66d13b49c18"),
                            Active = true,
                            DepartmentCode = "IT",
                            DepartmentName = "IT"
                        },
                        new
                        {
                            DepartmentID = new Guid("109a7620-f8bd-4fd4-b846-654533e8181c"),
                            Active = true,
                            DepartmentCode = "MKT",
                            DepartmentName = "Maketing"
                        });
                });

            modelBuilder.Entity("StudentManager.Domain.Entities.Department_Position", b =>
                {
                    b.Property<Guid>("DepartmentPositionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DepartmentID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PositionID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DepartmentPositionID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("PositionID");

                    b.ToTable("Department_Positions");

                    b.HasData(
                        new
                        {
                            DepartmentPositionID = new Guid("b2f3a4c5-6d7e-8f9a-b0c1-d2e3f4a5b6c7"),
                            DepartmentID = new Guid("ae0f6039-feff-4bc8-885e-d66d13b49c18"),
                            PositionID = new Guid("0dc8d5b1-6a04-44c0-b6a2-70c4987d646e")
                        });
                });

            modelBuilder.Entity("StudentManager.Domain.Entities.GradeLevel", b =>
                {
                    b.Property<Guid>("GradeLevelID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GradeLevelCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GradeLevelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SchoolID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GradeLevelID");

                    b.HasIndex("SchoolID");

                    b.ToTable("GradeLevels");
                });

            modelBuilder.Entity("StudentManager.Domain.Entities.Position", b =>
                {
                    b.Property<Guid>("PositionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("PositionCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PositionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PositionID");

                    b.ToTable("Positions");

                    b.HasData(
                        new
                        {
                            PositionID = new Guid("109a7620-f8bd-4fd4-b846-654533e8181c"),
                            Active = true,
                            PositionCode = "MGR",
                            PositionName = "Manager"
                        },
                        new
                        {
                            PositionID = new Guid("0dc8d5b1-6a04-44c0-b6a2-70c4987d646e"),
                            Active = true,
                            PositionCode = "DEV",
                            PositionName = "Developer"
                        });
                });

            modelBuilder.Entity("StudentManager.Domain.Entities.Position_Role", b =>
                {
                    b.Property<Guid>("PositionRoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PositionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RoleID1")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PositionRoleID");

                    b.HasIndex("PositionID");

                    b.HasIndex("RoleID");

                    b.HasIndex("RoleID1");

                    b.ToTable("Position_Roles");

                    b.HasData(
                        new
                        {
                            PositionRoleID = new Guid("a1b2c3d4-e5f6-7a8b-9c0d-e1f2a3b4c5d6"),
                            PositionID = new Guid("0dc8d5b1-6a04-44c0-b6a2-70c4987d646e"),
                            RoleID = new Guid("b1f2a3c4-5d6e-7f8a-9b0c-d1e2f3a4b5c6")
                        });
                });

            modelBuilder.Entity("StudentManager.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("RoleCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleID");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleID = new Guid("b1f2a3c4-5d6e-7f8a-9b0c-d1e2f3a4b5c6"),
                            Active = true,
                            RoleCode = "USER",
                            RoleName = "User"
                        },
                        new
                        {
                            RoleID = new Guid("c7d8e9f0-1a2b-3c4d-5e6f-7a8b9c0d1e2f"),
                            Active = true,
                            RoleCode = "STUDENT",
                            RoleName = "Student"
                        });
                });

            modelBuilder.Entity("StudentManager.Domain.Entities.Role_Action", b =>
                {
                    b.Property<Guid>("RoleActionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ActionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoleActionID");

                    b.HasIndex("ActionID");

                    b.HasIndex("RoleID");

                    b.ToTable("Role_Actions");

                    b.HasData(
                        new
                        {
                            RoleActionID = new Guid("a1b2c3d4-e5f6-7a8b-9c0d-e1f2a3b4c5d6"),
                            ActionID = new Guid("72652a32-3a06-4cf6-9c98-43ea0ac1d92d"),
                            RoleID = new Guid("b1f2a3c4-5d6e-7f8a-9b0c-d1e2f3a4b5c6")
                        },
                        new
                        {
                            RoleActionID = new Guid("a2b3c4d5-e6f7-8a9b-b0c1-d2e3f4a5b6c7"),
                            ActionID = new Guid("edf088e9-a8e2-41ff-947b-af8afba6e1c3"),
                            RoleID = new Guid("b1f2a3c4-5d6e-7f8a-9b0c-d1e2f3a4b5c6")
                        },
                        new
                        {
                            RoleActionID = new Guid("a3b4c5d6-e7f8-9a0b-c1d2-e3f4a5b6c7d8"),
                            ActionID = new Guid("4801c236-5983-49ae-8b83-71b17cb29ac1"),
                            RoleID = new Guid("b1f2a3c4-5d6e-7f8a-9b0c-d1e2f3a4b5c6")
                        });
                });

            modelBuilder.Entity("StudentManager.Domain.Entities.School", b =>
                {
                    b.Property<Guid>("SchoolID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchoolCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchoolName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SchoolID");

                    b.ToTable("Schools");
                });

            modelBuilder.Entity("StudentManager.Domain.Entities.Student", b =>
                {
                    b.Property<Guid>("StudentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("CreateBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudentID");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("StudentManager.Domain.Entities.StudentRegistration", b =>
                {
                    b.Property<Guid>("StudentRegistrationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<bool>("HasStarted")
                        .HasColumnType("bit");

                    b.Property<string>("ParentEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RegistrationSource")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudentRegistrationID");

                    b.ToTable("StudentRegistrations");
                });

            modelBuilder.Entity("StudentManager.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreateOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserID = new Guid("9e666a5d-8ba2-42e2-8dc4-fa560737c6a4"),
                            Active = true,
                            CreateOn = new DateTime(2025, 7, 24, 17, 2, 18, 69, DateTimeKind.Local).AddTicks(4594),
                            EmailAddress = "admin@gmail.com",
                            Password = "$2a$12$fMOWcOJCvLJwyXiV7Bnd1uR8eWB3vaXyKFnj8p6QUOAl3agAcsHle",
                            RefreshToken = "",
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("StudentManager.Domain.Entities.User_Department", b =>
                {
                    b.Property<Guid>("UserDepartmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DepartmentID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserDepartmentID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("UserID");

                    b.ToTable("User_Departments");

                    b.HasData(
                        new
                        {
                            UserDepartmentID = new Guid("abfc04bd-a5ad-4b75-aff2-5565049ea948"),
                            DepartmentID = new Guid("ae0f6039-feff-4bc8-885e-d66d13b49c18"),
                            UserID = new Guid("9e666a5d-8ba2-42e2-8dc4-fa560737c6a4")
                        });
                });

            modelBuilder.Entity("StudentManager.Domain.Entities.Class", b =>
                {
                    b.HasOne("StudentManager.Domain.Entities.GradeLevel", "GradeLevel")
                        .WithMany("Classes")
                        .HasForeignKey("GradeLevelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GradeLevel");
                });

            modelBuilder.Entity("StudentManager.Domain.Entities.Department_Position", b =>
                {
                    b.HasOne("StudentManager.Domain.Entities.Department", "Departments")
                        .WithMany("Department_Positions")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentManager.Domain.Entities.Position", "Positions")
                        .WithMany("Department_Positions")
                        .HasForeignKey("PositionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departments");

                    b.Navigation("Positions");
                });

            modelBuilder.Entity("StudentManager.Domain.Entities.GradeLevel", b =>
                {
                    b.HasOne("StudentManager.Domain.Entities.School", "School")
                        .WithMany("GradeLevels")
                        .HasForeignKey("SchoolID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("StudentManager.Domain.Entities.Position_Role", b =>
                {
                    b.HasOne("StudentManager.Domain.Entities.Position", "Position")
                        .WithMany("Position_Roles")
                        .HasForeignKey("PositionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentManager.Domain.Entities.Role", "Role")
                        .WithMany("Position_Roles")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentManager.Domain.Entities.Role", null)
                        .WithMany("User_Positions")
                        .HasForeignKey("RoleID1");

                    b.Navigation("Position");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("StudentManager.Domain.Entities.Role_Action", b =>
                {
                    b.HasOne("StudentManager.Domain.Entities.Action", "Actions")
                        .WithMany("Role_Actions")
                        .HasForeignKey("ActionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentManager.Domain.Entities.Role", "Roles")
                        .WithMany("Role_Actions")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actions");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("StudentManager.Domain.Entities.User_Department", b =>
                {
                    b.HasOne("StudentManager.Domain.Entities.Department", "Departments")
                        .WithMany("User_Departments")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentManager.Domain.Entities.User", "Users")
                        .WithMany("User_Departments")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departments");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("StudentManager.Domain.Entities.Action", b =>
                {
                    b.Navigation("Role_Actions");
                });

            modelBuilder.Entity("StudentManager.Domain.Entities.Department", b =>
                {
                    b.Navigation("Department_Positions");

                    b.Navigation("User_Departments");
                });

            modelBuilder.Entity("StudentManager.Domain.Entities.GradeLevel", b =>
                {
                    b.Navigation("Classes");
                });

            modelBuilder.Entity("StudentManager.Domain.Entities.Position", b =>
                {
                    b.Navigation("Department_Positions");

                    b.Navigation("Position_Roles");
                });

            modelBuilder.Entity("StudentManager.Domain.Entities.Role", b =>
                {
                    b.Navigation("Position_Roles");

                    b.Navigation("Role_Actions");

                    b.Navigation("User_Positions");
                });

            modelBuilder.Entity("StudentManager.Domain.Entities.School", b =>
                {
                    b.Navigation("GradeLevels");
                });

            modelBuilder.Entity("StudentManager.Domain.Entities.User", b =>
                {
                    b.Navigation("User_Departments");
                });
#pragma warning restore 612, 618
        }
    }
}
